use async_trait::async_trait;
use thiserror::Error;

use crate::models::{{pascalCase aggregate_name}};

#[async_trait]
pub trait {{pascalCase aggregate_name}}Repository: Send + Sync + 'static {
    async fn get_{{snakeCase aggregate_name}}(&self, id: String) -> Result<Option<{{pascalCase aggregate_name}}>, RepositoryFailure>;

    async fn save(&self, {{snakeCase aggregate_name}}: {{pascalCase aggregate_name}}) -> Result<(), RepositoryFailure>;
}

#[derive(Error, Debug, PartialEq)]
pub enum RepositoryFailure {
    #[error("Failed to get connection from pool")]
    FailedToGetConnectionFromPool,
    #[error("Something went wrong")]
    Unknown(String),
}
