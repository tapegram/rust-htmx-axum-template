use std::sync::Arc;

use thiserror::Error;

// Example repo dependency
// use crate::ports::worksite_repository::WorksiteRepository;

#[derive(Clone)]
pub struct {{pascalCase command_name}} {
    // Put infra dependencies in this struct
    // Below is an example of a repo dependency
    // pub worksite_repository: Arc<dyn WorksiteRepository>,
}

#[derive(Clone, Debug)]
pub struct {{pascalCase command_name}}Input {
    // Put input fields here
    pub id: String
}

// Change the return type, if needed
pub type {{pascalCase command_name}}Output = Result<(), {{pascalCase command_name}}Failure>;

impl {{pascalCase command_name}} {
    pub async fn {{snakeCase command_name}}(&self, input: {{pascalCase command_name}}Input) -> {{pascalCase command_name}}Output {
        todo!("Implement {{snakeCase command_name}}")
    }
}

#[derive(Error, Debug, PartialEq)]
pub enum {{pascalCase command_name}}Failure {
    #[error("Worksite does not exist")]
    NotFound,
    #[error("Something went wrong")]
    Unknown(String),
}
